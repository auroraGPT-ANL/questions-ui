"""add reviews and migrate affiliations to authors

Revision ID: 0b5affcd8969
Revises: 887dc42010dd
Create Date: 2024-07-02 09:42:32.855033

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0b5affcd8969'
down_revision: Union[str, None] = '887dc42010dd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("author", sa.Column('orcid', sa.String(), nullable=True))
    op.add_column("author", sa.Column('affiliation_id', sa.Integer(), nullable=True))
    op.add_column("author", sa.Column('position_id', sa.Integer(), nullable=True))

    #migrate affiliations
    conn =  op.get_bind()
    #first set the affiliation id to the most common affiliation for each author
    conn.execute(sa.text("""
    WITH AffiliationCounts AS (
        SELECT
            author_id,
            affiliation_id,
            COUNT(*) AS count
        FROM
            question
        LEFT JOIN affiliation ON question.affiliation_id == affiliation.id
        WHERE affiliation.name <> ''
        GROUP BY
            question.author_id, question.affiliation_id
    ),
    MaxAffiliation AS (
        SELECT
            author_id,
            MAX(count) AS max_count
        FROM AffiliationCounts
        GROUP BY author_id
    ),
    TopAffiliation AS (
        SELECT
            author.id as author_id,
            affiliation.name as affiliation_name,
            affiliation.id as affiliation_id
        FROM AffiliationCounts a
        LEFT JOIN author ON a.author_id == author.id
        LEFT JOIN affiliation ON a.affiliation_id == affiliation.id
        JOIN MaxAffiliation m ON a.author_id = m.author_id AND a.count = m.max_count
    )
    UPDATE author
    set affiliation_id = (
        SELECT t.affiliation_id
        FROM TopAffiliation t
        WHERE t.author_id == author.id
    )
    WHERE EXISTS (
        select 1
        from TopAffiliation t
        where t.author_id = author.id
    );
    """))
    conn.commit()
    #fix Karel Hrbacek from the City College of New York
    #fix Christopher S Baird from West Texas A&M University
    conn.execute(sa.text("""INSERT INTO affiliation(name) VALUES ('City College of New York');"""))
    conn.commit()
    conn.execute(sa.text("""INSERT INTO affiliation(name) VALUES ('West Texas A&M University');"""))
    conn.commit()
    conn.execute(sa.text("""UPDATE author set affiliation_id = (SELECT id from
                                                                affiliation
                                                                WHERE name ==
                                                                'City College of New York')
                         WHERE name == 'Karel Hrbacek';"""))
    conn.commit()
    conn.execute(sa.text("""UPDATE author set affiliation_id = (SELECT id from
                                                                affiliation
                                                                WHERE name ==
                                                                'West Texas A&M University')
                         WHERE name == 'Christopher S. Baird';"""))
    # Set remaining authors to being from Argonne
    conn.commit()
    conn.execute(sa.text("""UPDATE author set affiliation_id = (SELECT id from
                                                                affiliation
                                                                WHERE name ==
                                                                'Argonne National Laboratory')
                         WHERE author.affiliation_id IS NULL;"""))
    # position 1 is uninitialized, initialize everyone who is not with this
    conn.commit()
    conn.execute(sa.text(""" UPDATE author set position_id = 1 WHERE
                         author.position_id IS NULL;"""))
    conn.commit()
        
    with op.batch_alter_table("author") as author_batch:
        author_batch.alter_column('affiliation_id', nullable=False)
        author_batch.alter_column('position_id', nullable=False)
        author_batch.create_unique_constraint('ct_author_orcid_unique', ['orcid'])
        author_batch.create_foreign_key('fk_author_affiliation', 'affiliation', ['affiliation_id'], ['id'])
        author_batch.create_foreign_key('fk_author_position', 'position', ['position_id'], ['id'])

    with op.batch_alter_table("question") as question_batch:
        question_batch.drop_constraint('fk_question_affiliation', type_='foreignkey')
        question_batch.drop_constraint('fk_question_position', type_='foreignkey')
        question_batch.drop_column('position_id')
        question_batch.drop_column('affiliation_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('question', sa.Column('affiliation_id', sa.INTEGER(), nullable=True))
    op.add_column('question', sa.Column('position_id', sa.INTEGER(), nullable=True))

    conn = op.get_bind()
    conn.execute(sa.text(
    """
    UPDATE question
    SET position_id = (SELECT position_id FROM author where author.id == question.author_id);"""))
    conn.commit()
    conn.execute(sa.text("""UPDATE question
    SET affiliation_id = (SELECT affiliation_id FROM author where author.id == question.author_id);
    """))
    conn.commit()

    with op.batch_alter_table("question") as qop:
        qop.alter_column('affiliation_id', nullable=False)
        qop.alter_column('position_id', nullable=False)
        qop.create_foreign_key('fk_question_position', 'position', ['position_id'], ['id'])
        qop.create_foreign_key('fk_question_affiliation', 'affiliation', ['affiliation_id'], ['id'])
    with op.batch_alter_table("author") as aop:
        aop.drop_constraint('fk_author_affiliation', type_='foreignkey')
        aop.drop_constraint('fk_author_position', type_='foreignkey')
        aop.drop_constraint('ct_author_orcid_unique', type_='unique')
    with op.batch_alter_table("author") as aop:
        aop.drop_column('affiliation_id')
        aop.drop_column('position_id')
        aop.drop_column('orcid')
    # ### end Alembic commands ###
