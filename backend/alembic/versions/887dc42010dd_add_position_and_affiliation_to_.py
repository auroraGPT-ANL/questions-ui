"""Add position and affiliation to questions

Revision ID: 887dc42010dd
Revises: 
Create Date: 2024-06-04 16:52:26.114243

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '887dc42010dd'
down_revision: Union[str, None] = 'ff2a2e69f437'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if the 'position' table exists and create if not
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    if 'position' not in inspector.get_table_names():
        print('Creating position table')
        op.create_table('position',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('name', sa.String(), nullable=False),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('name')
        )

    # Similar check for 'affiliation' table
    if 'affiliation' not in inspector.get_table_names():
        print('Creating affiliation table')
        op.create_table('affiliation',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('name', sa.String(), nullable=False),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('name')
        )

    # Add columns to 'question' table using batch operations
    with op.batch_alter_table('question', schema=None) as batch_op:
        existing_columns = [col['name'] for col in inspector.get_columns('question')]
        if 'position_id' not in existing_columns:
            batch_op.add_column(sa.Column('position_id', sa.Integer(), nullable=True))
        if 'affiliation_id' not in existing_columns:
            batch_op.add_column(sa.Column('affiliation_id', sa.Integer(), nullable=True))
    with op.batch_alter_table('question', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_question_position', 'position', ['position_id'], ['id'])
        batch_op.create_foreign_key('fk_question_affiliation', 'affiliation', ['affiliation_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop the columns added to the 'question' table
    # Note: In SQLite, batch_alter_table should be used to remove columns
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    print(inspector.get_columns('question'))
    with op.batch_alter_table('question', schema=None) as batch_op:
        batch_op.drop_column('affiliation_id')
        batch_op.drop_column('position_id')

    # Drop the 'affiliation' table
    op.drop_table('affiliation')

    # Drop the 'position' table
    op.drop_table('position')
